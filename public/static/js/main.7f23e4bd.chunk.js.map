{"version":3,"sources":["components/PageLoading.tsx","components/AsyncComponent.tsx","views.lazy.ts","views/Page404/index.tsx","App.js","serviceWorker.js","index.js","util/consts.ts"],"names":["asyncComp","importComponent","state","component","default","this","setState","Wrap","props","Component","PageHall","AsyncComp","PageReg","PageRoom","PageLogin","App","path","exact","render","to","views","Page404","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","title","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAEe,aACX,OAAO,sDC0BIA,EAtB+C,SAAAC,GAC1D,kNACIC,MAAQ,CACJC,UAAW,MAFnB,mNAM6CF,IAN7C,gBAMyBE,EANzB,EAMgBC,QAERC,KAAKC,SAAS,CACVH,cATZ,mIAcQ,IAAMI,EAAYF,KAAKH,MAAMC,UAE7B,OAAOI,EAAO,kBAACA,EAASF,KAAKG,OAAY,kBAAC,EAAD,UAhBjD,GAAqBC,cCFZC,EAAWC,EAAU,kBAAM,+BAE3BC,EAAUD,EAAU,kBAAM,+BAE1BE,EAAWF,EAAU,kBAAM,+BAE3BG,EAAYH,EAAU,kBAAM,qDCV1B,aACX,OAAO,oCCiBII,MAff,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAS,kBAAM,kBAAC,IAAD,CAAUC,GAAG,cAClD,kBAAC,IAAD,CAAOH,KAAK,SAASC,OAAK,EAACd,UAAWiB,IACtC,kBAAC,IAAD,CAAOJ,KAAK,YAAYC,OAAK,EAACd,UAAWiB,IACzC,kBAAC,IAAD,CAAOJ,KAAK,QAAQC,OAAK,EAACd,UAAWiB,IACrC,kBAAC,IAAD,CAAOJ,KAAK,QAAQC,OAAK,EAACd,UAAWiB,IACrC,kBAAC,IAAD,CAAOjB,UAAWkB,OCFNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,QAAS,WACtDD,SAASE,MCRY,+CFiInB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7f23e4bd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default () => {\r\n    return <h1>加载中...</h1>;\r\n};","import React, { Component, ComponentClass } from 'react';\r\nimport Loading from './PageLoading';\r\n\r\ninterface componentStateType {\r\n    component: Component | null\r\n}\r\n\r\nconst asyncComp : (importComponent: any ) => ComponentClass = importComponent => {\r\n    return class extends Component<any, componentStateType> {\r\n        state = {\r\n            component: null\r\n        };\r\n\r\n        async componentDidMount() {\r\n            const { default: component } = await importComponent();\r\n\r\n            this.setState({\r\n                component\r\n            });\r\n        }\r\n\r\n        render() {\r\n            const Wrap: any = this.state.component;\r\n\r\n            return Wrap ? <Wrap {...this.props} /> : <Loading />;\r\n        }\r\n    }\r\n}\r\n\r\nexport default asyncComp;","/**\r\n * lazy-load\r\n */\r\n\r\nimport AsyncComp from './components/AsyncComponent';\r\n\r\nexport const PageHall = AsyncComp(() => import('./views/PageHall'));\r\n\r\nexport const PageReg = AsyncComp(() => import('./views/PageReg'));\r\n\r\nexport const PageRoom = AsyncComp(() => import('./views/PageRoom'));\r\n\r\nexport const PageLogin = AsyncComp(() => import('./views/PageLogin'));","import React from 'react';\r\n\r\nexport default () => {\r\n    return <h1>404</h1>;\r\n};","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport * as views from './views.lazy';\nimport Page404 from './views/Page404';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact render={ () => <Redirect to='/login' /> } />\n        <Route path='/login' exact component={views.PageLogin} />\n        <Route path='/register' exact component={views.PageReg} />\n        <Route path='/hall' exact component={views.PageHall} />\n        <Route path='/room' exact component={views.PageRoom} />\n        <Route component={Page404} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { APP_TITLE } from './util/consts';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'), () => {\n    document.title = APP_TITLE;\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const APP_TITLE = '五子棋对战平台';"],"sourceRoot":""}